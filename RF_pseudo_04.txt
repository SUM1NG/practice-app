This is the rules you are to follow:
Check for syntax errors and unmatched parenthesis
코멘트 작성할 때 한글로 개조식으로 작성해줘.
Make a comment for all functions,
first line of comment is a brief description,
the next lines should detail the input and output of the function.
If the function is more than 5 lines, then comment each of the steps

For all functions, notify the user for the specific errors.
For all functions, notify the user for what is happening for each of the steps, 
showing which of the if else cases was chosen.


Write in python code:
Ask the user for file_path to read a csv file, remove quotations in the file path.
Ask the user for the x_name for the x_axis. 
Then ask the user for multiple y_name for the y_axis, separated by comma.

Then create a new csv file in the same directory as the original file.
Name it "[processed]" + original name + ".csv"
Delete all columns that were not addressed by the user.
Delete all blank spaces.
Rearrange the columns in the order of x_name, then by y_names.
Save the values of second row as string; 
for column x_name, save it as x_units,
then for columns under y_names, as y_units.
Delete the first two rows.

In the new csv file, do not use datetime library,
convert the first column, formatted HH:MM:SS.FFF, into miliseconds(float).
HH means Hour, MM means Mintues, SS means Seconds, FFF means miliseconds.
Check if all values are float, if not, show message and convert to float.

Then for every column y_names, if a value inside the column repeat more than twice in a row,
unless it is 0, replace all the matching values with the lowest value in that column.

Then for all the blank rows in each of the y_names,
fill the row with the average of previous and next occurring value.
If it is the first row, then input the next occuring value.
If it is the last row, then input the previous occuring value.

Create a dictionary named, "data_dict".
Store x_name and y_names as keys(strings).
Then store x_units and y_units as values(strings).
Then from the new csv file, 
store corresponding data as a list of floats inside the dictionary as a value.

Draw a separate graph for each of the y_axis, with the x_axis as the x, and the y_axis as the y.
Show the graphs vertically in the same window.
The labels for x should be converted from miliseconds to HH:MM, round up.
Use different colors for each of the graph lines.
Left align on the top of the graph the name of the y_axis.
Make the window fill the whole screen.
The Y axis should be notched in 15 even lines.
The X axis should be notched in 20 even lines.

Call the functions from main.


"""
칼만 필터는 시스템이 시간에 따라 어떻게 변화하는지, 
그리고 이 변화에 얼마나 확신할 수 있는지에 대한 불확실성을 수치화
이를 위해 공분산 행렬 P와 시스템 노이즈 행렬 Q 및 측정 노이즈 R을 사용

kf.P (공분산 행렬): 시스템 상태의 불확실성
초기화에서는 상태의 초기 불확실성을 나타냅니다. 
값이 크면 상태 추정치에 대한 불확실성이 크다는 것을 의미하며, 
값이 작으면 불확실성이 작다는 것을 의미합니다. 
이 값이 커지면 칼만 필터는 측정값을 더 신뢰하게 되고, 
작아지면 현재 상태 추정치를 더 신뢰하게 됩니다.

kf.R (측정 노이즈): 측정 장치의 노이즈
이 값이 크면 측정 장치가 많은 노이즈를 생성한다고 가정하며, 
이 경우 칼만 필터는 측정값보다 모델을 더 신뢰하게 됩니다. 
반대로 이 값이 작으면 측정 장치가 정확하다고 가정하며, 
이 경우 칼만 필터는 측정값을 더 신뢰하게 됩니다.

kf.Q (시스템 노이즈 행렬): 시스템 자체에서 발생할 수 있는 무작위 노이즈
이 값이 크면 시스템 모델이 많은 노이즈를 생성한다고 가정하며, 
이 경우 칼만 필터는 측정값을 더 신뢰하게 됩니다. 
반대로 이 값이 작으면 시스템 모델이 정확하다고 가정하며, 
이 경우 칼만 필터는 모델을 더 신뢰하게 됩니다.

이러한 값들을 조정함으로써 칼만 필터의 행동을 제어할 수 있습니다. 
그러나 특정 값을 너무 크게 하거나 작게 하면 필터의 성능에 부정적인 영향을 미칠 수 있습니다. 
예를 들어, 측정 노이즈 R이 너무 크면 필터는 측정값을 무시하게 될 수 있으며, 
시스템 노이즈 Q가 너무 작으면 필터는 모델을 과도하게 신뢰하게 될 수 있습니다. 
따라서 이러한 값들은 주의해서 조정해야 합니다.
"""